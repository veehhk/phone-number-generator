using Microsoft.Extensions.DependencyInjection;
using PhoneNumberGenerator.Library.Abstract;
using PhoneNumberGenerator.Library.Concrete;
using PhoneNumberGenerator.Library.Types;

/// Define Keypad Layout
char[,] keyPadLayout =
{
    { '1', '2', '3' },
    { '4', '5', '6' },
    { '7', '8', '9' },
    { '*', '0', '#' }
};

/// Initiate DI containers
IServiceCollection serviceCollection = new ServiceCollection()
                                          .AddTransient<Rook>()
                                          .AddTransient<Knight>()
                                          .AddTransient<Bishop>()
                                          .AddTransient<Queen>()
                                          .AddTransient<King>()
                                          .AddTransient<Pawn>()
                                          .AddSingleton<IChessCoinFactory, ChessCoinFactory>()
                                          .AddSingleton<IKeypad>(provider => new Keypad(keyPadLayout))
                                          .AddSingleton<IKeyPadNavigator, KeyPadNavigator>();

/// Loop continuously until 0 is pressed
while (true)
{
    Console.WriteLine("----------------------------------------------------");
    Console.WriteLine("Select a chess coin number to generate phone numbers");
    Console.WriteLine("----------------------------------------------------");
    for (int i = 0; i < Enum.GetValues(typeof(ChessCoinType)).Length; i++)
    {
        Console.WriteLine((i + 1) + ". " + Enum.GetValues(typeof(ChessCoinType)).GetValue(i));
    }
    Console.WriteLine("0. Exit");
    Console.Write("\nInput chess coin: ");

    int option = 0;
    bool isParsed = int.TryParse(Console.ReadKey().KeyChar.ToString(), out option);

    //if circular navigation needed enable this code.
    //Console.Write("\nShould traverse circular?(y/n)");
    //bool circular = Console.ReadKey().KeyChar == 'y';
    bool circular = false;

    if (isParsed)
    {
        if (option == 0)
        {
            Console.WriteLine("\n\nExited!");
            break;
        }
        else if (option >= 1 && option <= 6)
        {
            {
                string coin = Enum.GetValues(typeof(ChessCoinType)).Cast<ChessCoinType>().ToList().FirstOrDefault(e => (int)e == option).ToString();

                Console.Write("\n\nSave the generated phone numbers?(y/n)");
                bool saveable = Console.ReadKey().KeyChar == 'y';

                /// Add chess coin type to DI containers based on the input option selected
                ServiceProvider serviceProvider = serviceCollection.AddTransient<IChessCoin>(provider =>
                                                                    {
                                                                        IChessCoinFactory? chessCoinFactory = provider.GetRequiredService<IChessCoinFactory>();
                                                                        return chessCoinFactory.Create(
                                                                            (ChessCoinType)Enum.Parse(typeof(ChessCoinType), coin)
                                                                        );

                                                                    })
                                                                   .AddSingleton<IKeyPadNavigator, KeyPadNavigator>()
                                                                   .BuildServiceProvider();

                IKeyPadNavigator keyPadNavigator = serviceProvider.GetRequiredService<IKeyPadNavigator>();

                /// Generates phone numbers
                IEnumerable<string> phoneNumbers = keyPadNavigator.GenerateNumbers(circular);

                if (keyPadNavigator.GetResultsCount() > 0)
                {
                    Console.WriteLine("\n\n" + keyPadNavigator.GetResultsCount() + " phone numbers generated by " + coin);
                    if (saveable)
                    {
                        File.WriteAllText(coin + "-phone-numbers.txt", string.Join("\n", phoneNumbers));
                        Console.WriteLine("\nPhone numbers are saved in " + Directory.GetCurrentDirectory() + "\\" + coin + "-phone-numbers.txt");
                    }
                }
                else
                {
                    Console.WriteLine("\n\n" + coin + " cannot generate any phone numbers");
                }

                Console.WriteLine("\n\nPress Enter to continue");
                while (Console.ReadKey().Key != ConsoleKey.Enter) ;
                Console.Clear();
            }
        }
        else
        {
            Console.WriteLine("\n\nInvalid coin option!");
            Console.WriteLine("\n\nPress Enter to continue");
            while (Console.ReadKey().Key != ConsoleKey.Enter) ;
            Console.Clear();
        }
    }
    else
    {
        Console.WriteLine("\n\nInvalid coin option!");
        Console.WriteLine("\n\nPress Enter to continue");
        while (Console.ReadKey().Key != ConsoleKey.Enter) ;
        Console.Clear();
    }
}